# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

stages:
- stage: Checkout
  jobs:
  - job:
    steps:
    - task: InstallSSHKey@0
      inputs:
        hostName: github.com
        sshPublicKey: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCjxr4aq5yc7aeuazmSXr9+7vtKqIizrQHlWj4jkyTY8++8U8lWeIaQLvmsFoejiw4Y8yQiAbmQZ/uq+0bsz2KUQIunz8E/7q3KEO/GzcX/fVmgxf09u4J9WTUGoQbMNL9svgpH6M2K3UZqBH9xbzjjF/ql99UDlK8gC/PudRZaXC7c85CIsAEJ9A5fwPKw71jRjW3lhjVtVMyN9r1B2FS8eklRurrx6z1z9nAqbfSJFk+JgS5wWBbnt1VhKfEryghwU2hUzdc//f2YfajyRfR7B1yUrJFD1CoiEKhTLib/L/ehM1pg+g/XZ116qLVmiSv4DiDruV9AQ7dQBAkuFmLW5YgAMRfH/3xBRYSqFRnaAds0/4DyeCQzZhMJRwGuy7eyGh4haCkxg8BjtJOVVpEfiBZ1PEr9wdmiy6EbBaU9qREsbJazyO3X+0tFnIQLdVJbi4DWnkUy4rJMcmkmx0cXDRgRikP/1ndK/51Ocvp5DYQ4yKfyvklVX8nWt4/eW4WO720YtpjMi2HBVk3VwoUnhUJa90lcOZlpJM+hZRSBi4s7unJV5cTNxIoZw2sW4BNBef7UVv1cJKdB8Q5XH2SxjMBeJTgS5fu5FT8MxFNFC7XnmLtCn9+X97w14hWAAjUFgBY2w2/DcVnbSpWK9FK61UxPUu190OjKNyQ4qG3DYQ== bmac6502@gmail.com
        sshKeySecureFile: bmac6502_rsa

    - checkout: self
      submodules: "true"

- stage: Build      
  jobs:
  - job: MacOS
    pool:
      vmImage: macOS-10.14
    steps:

    - script: 'ls ./build'
      workingDirectory: '$(system.defaultworkingdirectory)'
      displayName: 'list builds folder'
      
    - script: './generate-mac.sh'
      workingDirectory: ./build
      displayName: 'Generate Project [Mac]'

    - script: './build-mac-all.sh'
      workingDirectory: ./build
      displayName: 'Build Project [Mac - All]'

    - script: './test-mac-all.sh'
      workingDirectory: ./build
      displayName: 'Run Unit Tests [Mac - All]'

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(system.defaultworkingdirectory)'
        Contents: '$(artifacts.Mac)'
        TargetFolder: '$(build.artifactstagingdirectory)'
      condition: succeededOrFailed()

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: $(system.teamProject)'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        ArtifactName: '$(system.teamProject)'
      condition: succeededOrFailed()

  - job: Windows
    pool:
      vmImage: vs2017-win2016
    steps:
    - task: CMake@1
      displayName: 'CMake [VS2017]'
      inputs:
        workingDirectory: build/win
        cmakeArgs: '-G "Visual Studio 15 2017" -A x64 ../..'

    - task: VSBuild@1
      displayName: 'Visual Studio build'
      inputs:
        solution: 'build/win/*.sln'
        vsVersion: 15.0
        msbuildArchitecture: x64

    - script: 'ctest -C Release'
      workingDirectory: ./build/win/
      displayName: 'Run Unit Tests'

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(system.defaultworkingdirectory)'
        Contents: '$(artifacts.Windows)'
        TargetFolder: '$(build.artifactstagingdirectory)'
      condition: succeededOrFailed()

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: $(system.teamProject)'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        ArtifactName: '$(system.teamProject)'
      condition: succeededOrFailed()

  - job: Linux
    pool:
      vmImage: ubuntu-16.04
    steps:
    - script: 'alias python=python3'
      displayName: 'alias python'

    - task: CMake@1
      displayName: 'CMake [Unix]'
      inputs:
        workingDirectory: build/linux
        cmakeArgs: '-G "Unix Makefiles" ../..'

    - script: make
      workingDirectory: build/linux
      displayName: 'Makefile Build'

    - script: 'ctest -C Release'
      workingDirectory: ./build/linux/
      displayName: 'Run Unit Tests'

    - script: 'ls ./build/linux/src'
      workingDirectory: '$(system.defaultworkingdirectory)'
      displayName: 'list artifacts'

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(system.defaultworkingdirectory)'
        Contents: '$(artifacts.Linux)'
        TargetFolder: '$(build.artifactstagingdirectory)'
      condition: succeededOrFailed()

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: $(system.teamProject)'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        ArtifactName: '$(system.teamProject)'
      condition: succeededOrFailed()